package student;
import java.awt.Color;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map.Entry;
import java.util.NoSuchElementException;
import java.util.Queue;
import java.util.Random;
import java.util.Set;

import javax.swing.text.html.HTMLDocument.Iterator;

import game.Board;
import game.Game;
import game.GameRunner;
import game.UserData;
import game.Vector;
import game.Score;
import game.PQueue;
import game.Node;
import game.Main;
import game.Edge;
import game.Colorable;
import game.BoardElement;
import game.Manager;
import game.Parcel;
import game.Truck;

public class MyManager extends Manager {
	
	

	public MyManager() {
		// TODO Auto-generated constructor stub
	}

	boolean flag = true; //true if pre-processing not done

	@SuppressWarnings("unchecked")
	@Override
	public void run() {
		// TODO Auto-generated method stub
		flag = true;

		Set<Parcel> par = this.getParcels();
		Set<Parcel> parcels = par;
		ArrayList<Truck> tr = this.getTrucks();
		ArrayList<Truck> trucks = tr;
		
		//match as many parcels as possible with their corresponding truck color
		for (Truck t : trucks) {
			t.setUserData(matchColor(t,parcels));
		}
		
		boolean contains = false;
		
		//add each remaining parcel to the ArrayList of a random truck
		for(Parcel p : parcels){
			for (Truck t : trucks){
				if (((LinkedList<Parcel>) t.getUserData()).contains(p)){
					contains = true;
				}
			}
			
			if (contains == false){
				Random random = new Random(); 
				int r = random.nextInt(trucks.size());
				((LinkedList<Parcel>) trucks.get(r).getUserData()).add(p);	
			}
		}
		flag = false;
	}

	@SuppressWarnings("unchecked")
	@Override
	public void truckNotification(Truck t, Notification message) {
		// TODO Auto-generated method stub

		/**if (message != Notification.WAITING){
			return;
		}*/
		
		//preprocessing not done
		if (flag == true){
			return;
		}
		
		
		Set<Parcel> parcels = this.getParcels();
		LinkedList<Parcel> user = ((LinkedList<Parcel>) t.getUserData());

		//if there is at least one un-delivered parcel in the game
		if (parcels.isEmpty() == false){
			
			//t has load
			if (t.getLoad() != null){
				if (t.getLocation() == t.getLoad().destination){
					t.dropoffLoad();
				}
				else {
					t.setTravelPath(Paths.dijkstra(t.getLocation(), 
							t.getLoad().destination));
				}
			}
			//t has no load
			else {
				try {
					//t is on top of parcel it needs, pick it up
					if (t.getLocation() == user.getFirst().getLocation()){
						t.pickupLoad(user.getFirst());
						user.remove();
					}
					//t needs to find next parcel to pick up
					else {
						t.setTravelPath(Paths.dijkstra(t.getLocation(), 
								user.getFirst().getLocation()));
					}
				}
				//truck has delivered all of its parcels, let travel 
				//randomly to surrounding nodes until all parcels delivered
				catch (NoSuchElementException e){
					Random random = new Random(); 
					int r = random.nextInt(t.getLocation().getNeighbors().size());
					Set<Node> n = t.getLocation().getNeighbors().keySet();
					ArrayList<Node> nodeList = new ArrayList<Node> ();
					for (Node no : n){
						nodeList.add(no);
					}
					t.setTravelPath(Paths.dijkstra(t.getLocation(), nodeList.get(r)));
				}
			}
		} 
		else {
			t.setTravelPath(Paths.dijkstra(t.getLocation(), 
					this.getBoard().getTruckDepot()));
		}
		
	}
	
	public static LinkedList<Parcel> matchColor (Truck t, Set<Parcel> parcels) {
		HashMap<Color,Parcel> colors = new HashMap<Color, Parcel> ();
		Set<Color> colorSet = colors.keySet();
		
		LinkedList<Parcel> parcList = new LinkedList<Parcel> ();
		
		for (Parcel p: parcels){
			colors.put(p.getColor(), p);
		}
		
		for (Color c : colorSet) {
			if (t.getColor() == c){
				parcList.add(colors.get(c)); 
				colors.remove(c);
			}
		}
				
		return parcList;
		
	}
	
}